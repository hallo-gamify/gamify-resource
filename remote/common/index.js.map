{"version":3,"sources":["../file:/D:/PROJECTs/GAMIFY/gamify-templates/assets/remote/common/scripts/file:/D:/PROJECTs/GAMIFY/gamify-templates/assets/remote/common/scripts/LobbyPopup.ts","../file:/D:/PROJECTs/GAMIFY/gamify-templates/assets/remote/common/scripts/ui/file:/D:/PROJECTs/GAMIFY/gamify-templates/assets/remote/common/scripts/ui/PlayerInboxButton.ts","../file:/D:/PROJECTs/GAMIFY/gamify-templates/assets/remote/common/scripts/ui/file:/D:/PROJECTs/GAMIFY/gamify-templates/assets/remote/common/scripts/ui/PlayerInboxItem.ts","../file:/D:/PROJECTs/GAMIFY/gamify-templates/assets/remote/common/scripts/network/file:/D:/PROJECTs/GAMIFY/gamify-templates/assets/remote/common/scripts/network/PlayerInboxNetwork.ts","../file:/D:/PROJECTs/GAMIFY/gamify-templates/assets/remote/common/scripts/file:/D:/PROJECTs/GAMIFY/gamify-templates/assets/remote/common/scripts/PlayerInboxPopup.ts","../file:/D:/PROJECTs/GAMIFY/gamify-templates/assets/remote/common/scripts/types/file:/D:/PROJECTs/GAMIFY/gamify-templates/assets/remote/common/scripts/types/PlayerInboxType.ts"],"names":["_decorator","ccclass","property","GamifyComponent","importRemoteCCClass","LobbyPopupStatus","_dec","remoteCCClass","_dec2","type","Color","_dec3","SpriteFrame","_dec4","ServiceRequestConfig","_descriptor","_applyDecoratedDescriptor","_class2","_GamifyComponent","LobbyPopup","_this","_len","arguments","length","args","Array","_key","call","apply","concat","_initializerDefineProperty","_assertThisInitialized","_descriptor2","_descriptor3","servieNetworkName","fillImgWrapper","lobbyURL","_inheritsLoose","_proto","prototype","onData","state","action","_networkState","_networkState2","_networkState3","_networkState4","networkState","actionType","payload","API_ACTION","AUTH_RESULT","log","MainGameAction","INIT","apiService","this","getAPIData","enableLobby","sys","isMobile","config","homeButton","urlSearchParams","URLSearchParams","window","location","search","get","isURLValid","decodeURIComponent","status","SETUP_COMPLETED","render","serviceRequest","ResponseAction","onRender","_onRender","_asyncToGenerator","_regeneratorRuntime","mark","_callee","done","capturedState","sharedData","wrap","_context","prev","next","t0","request","abrupt","hidePopup","displayHomeButton","setButtonColor","buttonColor","toString","stop","_x","_x2","_x3","serviceName","serviceData","error","urlStr","undefined","showPopup","_showPopup","_callee2","useEffect","uiOpacity","_context2","node","getComponent","UIOpacity","addComponent","children","forEach","childNode","active","Tween","stopAllByTarget","Promise","resolve","tween","set","opacity","to","start","_x4","_hidePopup","_callee3","_this2","_context3","_x5","homeIcon","styleSheet","document","createElement","innerText","head","appendChild","className","fillImg","src","texture","addEventListener","onHomeButtonPressed","bind","body","colorStr","isLobbyEnabled","match","classList","add","_onHomeButtonPressed","_callee4","_context4","onCancelButtonPressed","_onCancelButtonPressed","_callee5","_context5","onOKButtonPressed","_onOKButtonPressed","_callee6","_context6","replace","configurable","enumerable","writable","initializer","_class","_RF","pop","SpineClip","_FloatButton","PlayerInboxButton","_animation","onLoad","animation","onPress","_onPress","event","play","onEnable","_createClass","key","value","FloatButton","Object","getOwnPropertyDescriptor","Label","_class3","_Eventify","PlayerInboxItem","data","_isActive","update","deltaTime","claimBefore","isActive","timeRemaining","getTime","Date","now","expireTimeTitle","string","convertMsToTime","isRead","rewardTitle","count","onClaimReward","emit","EVENT","SELECTED","updateExpireTime","milliseconds","seconds","Math","floor","minutes","hours","days","padTo2Digits","num","padStart","onDestroy","targetOff","getComponentsInChildren","Sprite","sp","grayscale","getComponentInChildren","Button","interactable","Eventify","Component","PlayerInboxNetworkState","_WebSocketComponent","PlayerInboxNetwork","initNetworkState","connect","_url","_initNetworkState","wssURL","getStartDateParam","paramKey","date","getFullYear","getMonth","getDate","toISOString","getEndDateParam","onMessage","client","dispatch","PlayerInboxAction","UPDATE_INBOX","onError","WebSocketComponent","readonly","Node","group","_dec5","_dec6","_dec7","_dec8","displayName","_dec9","Prefab","_dec10","RemoteMultilingualTextPackage","_dec11","_dec12","_dec13","_dec14","_dec15","_AsyncWaitify","PlayerInboxPopup","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","_descriptor9","_descriptor10","_descriptor11","_descriptor12","_descriptor13","_descriptor14","_selectedItemInfo","servieName","_continue","allowActionTypes","SETTING","CLAIM","SHOW","HIDE","onInit","readyStates","waitForReady","then","PlayerInboxStatus","SHOW_ICON_VIEW","onStoreRegisted","senderIsMe","hasOtherState","waitForStore","sender","indexOf","ready","checkAndUpdateClaimmingState","implementSettingState","SHOW_INBOX_VIEW","READY","js","isNumber","HIDE_VIEW","claimed","create","url","SHOW_CONTINUE_VIEW","UPDATE","AUTO_SPIN","showIconViewRender","showInboxViewRender","requestInboxStateRender","requestClaimmingStateRender","updateAutoSpinSettingRender","showContinuePopupRender","executeSpinStateRender","getOtherState","playerReward","getClaimedRewards","claimedInfo","getClaimInfoFromRewardData","_claimedInfo$data","_claimedInfo$data2","isStoreRegisted","warn","waitFor","lastStatus","_requestInboxStateRender","listingService","sent","renderInboxList","_requestClaimmingStateRender","_capturedState$claime","_capturedState$claime2","claimUrl","_claimedInfo","claimService","_updateAutoSpinSettingRender","_state$claimed","rewardCount","betSetting","isUnstopable","isUnstoppable","autoSpinNumber","betConfig","_executeSpinStateRender","SPIN","_x6","_showContinuePopupRender","_this3","curtain","playerInboxPanel","closeButton","continueNotication","dragButton","_x7","_showInboxViewRender","_callee7","_context7","_x8","_showIconViewRender","_callee8","_context8","_x9","claimedReward","Helper","searchValue","isArray","find","reward","getPlayMode","spinData","spin","numOfFreeSpin","freeSpins","id","rewardData","isString","JSON","parse","claimId","_renderInboxList","_callee9","_networkState$config","_networkState$config2","domain","playerToken","inboxList","_context9","playerInbox","emptyNotication","elementData","index","inboxInfo","createMap","module","push","sort","a","b","timeA","timeB","updateInboxHistoryRender","_x10","_updateInboxHistoryRender","_callee10","_this4","_context10","inboxContainer","itemPrefab","languagePackage","removeAllChildren","itemName","itemNode","getChildByName","instantiate","parent","name","item","on","onClaimItem","_x11","_onClaimItem","_callee11","itemInfo","_context11","_x12","onPressIconButton","onPressCloseButton","onPressOkButton","getCurrentRewardId","getCurrentModule","getIsFunParam","AsyncWaitify","GamePopup","UPDATE_SETTING"],"mappings":"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","file":"all.js","sourcesContent":["import { _decorator, Component, Node } from 'cc';\r\nimport { importRemoteCCClass, remoteCCClass } from 'db://assets/Scripts/gamify/utils/RemoteScriptImporter';\r\nimport { IGamifyComponent } from '../../../Scripts/gamify/interfaces/IComponent';\r\nimport { Action } from '../../../Scripts/gamify/core/Action';\r\nimport { SpriteFrame } from 'cc';\r\nimport { Color } from 'cc';\r\nimport { log } from 'cc';\r\nimport { sys } from 'cc';\r\nimport { API_ACTION, MainGameAction } from '../../../Scripts/ui/actions/StartActions';\r\nimport { error } from 'cc';\r\nimport { DEV } from 'cc/env';\r\nimport { tween } from 'cc';\r\nimport { Tween } from 'cc';\r\nimport { UIOpacity } from 'cc';\r\nimport { ServiceRequestConfig } from '../../../Scripts/ui/api/ServiceRequestConfig';\r\nimport { APIServiceAdaptor } from '../../../Scripts/ui/api/APIServiceAdaptor';\r\nconst { ccclass, property } = _decorator;\r\n\r\nconst CSSButtonStyle = `.lobbyBtn{width:60px;height:60px;position:absolute;right:0;top:0;margin-top:20px;margin-right:20px;border-radius:50%;background-color:#763a00;padding:0;border:0;}.lobbyBtn:hover{background-color:#fca14c;}.lobbyBtn:active{background-color:#4b4b4b;}`;\r\n\r\nconst GamifyComponent:any = importRemoteCCClass('GamifyComponent')\r\n\r\nenum LobbyPopupStatus {\r\n    INIT,\r\n    SETUP_COMPLETED\r\n}\r\n\r\ntype LobbyPopupSate = {\r\n    status:LobbyPopupStatus,\r\n    enableLobby:boolean,\r\n    lobbyURL:string\r\n}\r\n\r\n\r\n\r\n@remoteCCClass('LobbyPopup')\r\nexport class LobbyPopup extends GamifyComponent implements IGamifyComponent {\r\n    \r\n    @property({type:Color})\r\n    buttonColor:Color = new Color();\r\n\r\n    @property({type:SpriteFrame})\r\n    homeIcon:SpriteFrame = null;\r\n\r\n    @property({type:ServiceRequestConfig})\r\n    serviceRequest:ServiceRequestConfig = null;\r\n\r\n    // @property({type:APIServiceAdaptor})\r\n    // newtworkAdaptor:APIServiceAdaptor = null;\r\n\r\n    servieNetworkName:string = null;\r\n    \r\n    private fillImgWrapper:HTMLButtonElement = null;\r\n\r\n    private lobbyURL:string;\r\n\r\n    // onStoreRegisted(state: any, action: Action): void {\r\n    //     if(action.sender == this.getStateName()){\r\n    //         console.log('-----------')            \r\n                         \r\n    //     }\r\n    // }\r\n\r\n    // onInit(readyStates?: string[]): void {\r\n       \r\n    // }\r\n\r\n    /**\r\n     * \r\n     * @param state \r\n     * @param action \r\n     */\r\n    onData(state:LobbyPopupSate, action:Action){\r\n        const actionType:string = action.type;\r\n        const payload:any = action.payload;\r\n        let networkState:any\r\n        switch(actionType){\r\n            case API_ACTION.AUTH_RESULT:\r\n                log('auth result');\r\n            case MainGameAction.INIT:                \r\n                if(payload && payload.apiService) {\r\n                    this.servieNetworkName = payload.apiService;\r\n                }\r\n                networkState = this.getAPIData(this.servieNetworkName);\r\n                state.enableLobby = (!sys.isMobile && networkState && networkState?.config && (networkState?.config?.homeButton === 'true' || networkState?.config?.homeButton === true));\r\n                // \r\n                if(state.enableLobby){\r\n                    const urlSearchParams = new URLSearchParams(window.location.search);\r\n                    state.lobbyURL = urlSearchParams.get('redirectUrl');\r\n                    if (state.lobbyURL && this.isURLValid(state.lobbyURL)) {\r\n                        state.lobbyURL = decodeURIComponent(state.lobbyURL);\r\n                        this.lobbyURL = state.lobbyURL;\r\n                        state.status = LobbyPopupStatus.SETUP_COMPLETED;\r\n                    } else {                   \r\n                        state.status = LobbyPopupStatus.INIT;\r\n                    }\r\n\r\n                    this.render();\r\n                }\r\n                \r\n            case this.serviceRequest.ResponseAction:  \r\n                networkState = this.getAPIData(this.servieNetworkName);\r\n                state.lobbyURL = networkState?.config?.lobbyURL;\r\n                this.lobbyURL = state.lobbyURL;\r\n                state.status = LobbyPopupStatus.SETUP_COMPLETED;\r\n                this.render();\r\n                break\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param done \r\n     * @param capturedState \r\n     * @param sharedData \r\n     */\r\n    async onRender(done:Function, capturedState?:LobbyPopupSate, sharedData?:any){\r\n        switch(capturedState.status){\r\n            case LobbyPopupStatus.INIT:                \r\n                this.serviceRequest.request();\r\n                break;\r\n\r\n            case LobbyPopupStatus.SETUP_COMPLETED:\r\n                this.hidePopup();\r\n                this.displayHomeButton();\r\n                this.setButtonColor(this.buttonColor.toString())  \r\n                break;\r\n        }\r\n        done();\r\n    }\r\n\r\n    //-----------------\r\n\r\n    /**\r\n     * \r\n     * @returns \r\n     */\r\n    getAPIData(serviceName:string):any{\r\n        if(serviceName){\r\n            const serviceData:any = this['getOtherState'](serviceName) as any;\r\n            if(!serviceData) {\r\n                error('[Lobby Popup]: Không có hoặc setup nhầm service');\r\n                return null;\r\n            }\r\n            return serviceData;\r\n        }else {            \r\n            error('[Lobby Popup] Chưa khai báo service name ! Có thể do StartGameAction.INIT chưa được dispatch.')\r\n        }\r\n        return null;\r\n    }\r\n\r\n    //-----------------\r\n\r\n    private isURLValid(urlStr: string): boolean {\r\n        return (urlStr != undefined && urlStr != null && urlStr != '#' && urlStr.length > 0);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param useEffect \r\n     */\r\n    private async showPopup(useEffect:boolean = false){\r\n        const uiOpacity:UIOpacity = this.node.getComponent(UIOpacity) || this.node.addComponent(UIOpacity);\r\n        this.node.children.forEach((childNode:Node)=>{            \r\n            childNode.active = true;\r\n        })\r\n        if(useEffect){\r\n            Tween.stopAllByTarget(this.node);\r\n            await new Promise((resolve: Function) => {                \r\n                tween(uiOpacity).set({\r\n                    opacity: 0\r\n                })\r\n                .to(0.4, { opacity: 255 })\r\n                .call(resolve)\r\n                .start();\r\n            });\r\n        }else{\r\n            uiOpacity.opacity = 255;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param useEffect \r\n     */\r\n    private async hidePopup(useEffect:boolean = false){\r\n        if(useEffect){\r\n            Tween.stopAllByTarget(this.node);\r\n            await new Promise((resolve: Function) => {\r\n                const uiOpacity:UIOpacity = this.node.getComponent(UIOpacity) || this.node.addComponent(UIOpacity);\r\n                tween(uiOpacity).set({\r\n                    opacity: 255\r\n                })\r\n                .to(0.4, { opacity: 0 })\r\n                .call(resolve)\r\n                .start();\r\n            });\r\n        }\r\n        // \r\n        this.node.children.forEach((childNode:Node)=>{                \r\n            childNode.active = false;\r\n        })        \r\n    }\r\n    /**\r\n     * \r\n     */\r\n    protected displayHomeButton(){\r\n        if(this.homeIcon){\r\n            const styleSheet = document.createElement(\"style\");\r\n            styleSheet.innerText = CSSButtonStyle;\r\n            document.head.appendChild(styleSheet)\r\n\r\n            // Create a wrapper div for fillImg\r\n            this.fillImgWrapper = document.createElement('button');\r\n            this.fillImgWrapper.className = 'lobbyBtn';\r\n            let fillImg = document.createElement('img');\r\n            fillImg.className = 'lobbyBtnImg';\r\n            fillImg.src = this.homeIcon.texture.toString()\r\n            fillImg.addEventListener('click', this.onHomeButtonPressed.bind(this));\r\n\r\n            this.fillImgWrapper.appendChild(fillImg); // Append fillImg to the wrapper div\r\n            document.body.appendChild(this.fillImgWrapper); // Append the wrapper div to the body\r\n\r\n\r\n        }else{\r\n\r\n        }\r\n    }\r\n\r\n    protected setButtonColor(colorStr: string) {\r\n        if (this.isLobbyEnabled && this.fillImgWrapper) {\r\n            var regex = /[0-9A-Fa-f]{6}/g;\r\n            if (colorStr.match(regex)) {\r\n                let styleSheet = document.createElement(\"style\");\r\n                styleSheet.innerText = `.lobbyBtn_1{background-color:${colorStr}}`;\r\n                document.head.appendChild(styleSheet);\r\n                this.fillImgWrapper.classList.add('lobbyBtn_1');\r\n            }\r\n            else {\r\n                log('Color string is invalid - ', colorStr);\r\n            }\r\n        }\r\n    }\r\n\r\n    // ---------\r\n\r\n    async onHomeButtonPressed() {\r\n        await this.showPopup(true);\r\n    }\r\n    \r\n    async onCancelButtonPressed(){\r\n        await this.hidePopup(true);\r\n    }\r\n\r\n    async onOKButtonPressed(){\r\n        this.hidePopup(true);\r\n        if (this.lobbyURL && this.isURLValid(this.lobbyURL)) {\r\n            //redirect\r\n            window.location.replace(this.lobbyURL);\r\n        } else {\r\n            error('Invalid redirect URL ' + this.lobbyURL);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n","import { _decorator, Component, Node } from 'cc';\r\nimport { FloatButton } from '../../../../Scripts/ui/button/FloatButton';\r\nimport { SpineClip } from '../../../../Scripts/ui/anims/SpineClip';\r\nimport { EventTouch } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('PlayerInboxButton')\r\nexport class PlayerInboxButton extends FloatButton {\r\n        \r\n    @property({ type: SpineClip })\r\n    public get animation(): SpineClip {\r\n        return this._animation;\r\n    }\r\n    public set animation(value: SpineClip) {\r\n        this._animation = value;\r\n    }\r\n\r\n    // @property({serializable:true})\r\n    private _animation: SpineClip;\r\n\r\n    onLoad(): void {\r\n        super.onLoad()\r\n        if(!this.animation){\r\n            this.animation = this.getComponent(SpineClip);\r\n        }\r\n    }\r\n\r\n    async onPress(event:EventTouch){        \r\n        await this.animation.play(1);\r\n        // this.animation.play(0);\r\n        super.onPress(event);        \r\n    }\r\n\r\n    protected onEnable(): void {\r\n        this.animation.play(0);\r\n    }\r\n\r\n}\r\n\r\n\r\n","import { _decorator, Component, Node } from 'cc';\r\nimport { InboxInfo } from '../types/PlayerInboxType';\r\nimport { Event } from 'cc';\r\nimport { Label } from 'cc';\r\nimport { Eventify } from 'cc';\r\nimport { Sprite } from 'cc';\r\nimport { Button } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('PlayerInboxItem')\r\nexport class PlayerInboxItem extends Eventify(Component) {\r\n\r\n    static EVENT = {\r\n      SELECTED:'selected_item_event'\r\n    }\r\n\r\n    @property({type:Label})\r\n    rewardTitle:Label = null;\r\n\r\n    @property({type:Label})\r\n    expireTimeTitle:Label = null;\r\n\r\n    private data:InboxInfo;\r\n    private _isActive: boolean = true;\r\n    public get isActive(): boolean {\r\n      return this._isActive;\r\n    }\r\n    public set isActive(value: boolean) {\r\n      if(this._isActive !== value){\r\n        const allSprites:Sprite[] = this.getComponentsInChildren(Sprite);\r\n        allSprites.forEach((sp:Sprite)=>sp.grayscale = !this._isActive);\r\n        (this.getComponentInChildren(Button) as Button).interactable = this._isActive;      \r\n      }\r\n      this._isActive = value;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param deltaTime \r\n     */\r\n    update(deltaTime: number) {\r\n        if(this.data && this.data.claimBefore && this.isActive){\r\n          const timeRemaining:number = this.data.claimBefore.getTime() - Date.now()\r\n          this.expireTimeTitle.string = this.convertMsToTime(timeRemaining);\r\n          this.isActive = (!this.data.isRead && timeRemaining > 1000);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param data \r\n     */\r\n    render(data:InboxInfo){\r\n        this.data = data        \r\n        this.rewardTitle.string = data.count + this.rewardTitle.string;        \r\n        \r\n\r\n        // this.isActive = false\r\n    }\r\n\r\n    onClaimReward(event:Event){\r\n        this.emit(PlayerInboxItem.EVENT.SELECTED, this.data)\r\n    }\r\n\r\n\r\n\r\n    // ---------------------\r\n\r\n    private updateExpireTime(){\r\n\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param milliseconds \r\n     * @returns \r\n     */\r\n    private convertMsToTime(milliseconds: number) {\r\n        if(!this.isActive)\r\n          return `00d:00h:00m:00s`;\r\n          \r\n        let seconds:number = Math.floor(milliseconds / 1000);\r\n        let minutes:number = Math.floor(seconds / 60);\r\n        let hours:number = Math.floor(minutes / 60);\r\n        let days:number = Math.floor(hours / 24);\r\n    \r\n        seconds = seconds % 60;\r\n        minutes = minutes % 60;\r\n    \r\n        // 👇️ If you don't want to roll hours over, e.g. 24 to 00\r\n        // 👇️ comment (or remove) the line below\r\n        // commenting next line gets you `24:00:00` instead of `00:00:00`\r\n        // or `36:15:31` instead of `12:15:31`, etc.\r\n        hours = hours % 24;\r\n    \r\n        if (seconds < 0)\r\n          return `00d:00h:00m:00s`;\r\n    \r\n        return `${this.padTo2Digits(days)}d:${this.padTo2Digits(hours)}h:${this.padTo2Digits(minutes)}m:${this.padTo2Digits(seconds)}s`;\r\n      }\r\n    \r\n    private padTo2Digits(num: number) {\r\n      return num.toString().padStart(2, '0');\r\n    }\r\n\r\n    // ---------------------\r\n    protected onDestroy(): void {\r\n      this.targetOff(this)\r\n    }\r\n\r\n}\r\n\r\n\r\n","import { _decorator, Component, Node } from 'cc';\r\nimport { WebSocketComponent } from '../../../../Scripts/ui/network/WebSocketComponent';\r\nimport { Action } from '../../../../Scripts/gamify/core/Action';\r\nimport { ServiceRequestConfig } from '../../../../Scripts/ui/api/ServiceRequestConfig';\r\nimport { MainGameAction } from '../../../../Scripts/ui/actions/StartActions';\r\nimport { error } from 'cc';\r\nimport { log } from 'cc';\r\nimport { Helper } from '../../../../Scripts/gamify/utils/Helper';\r\nimport { js } from 'cc';\r\nimport { InboxInfo, PlayerInboxAction } from '../types/PlayerInboxType';\r\nimport { EventHandler } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n\r\n\r\ntype PlayerInboxState = {\r\n    status:number,\r\n    data?:InboxInfo[]\r\n    // error?:\r\n}\r\n\r\n\r\n\r\nenum PlayerInboxNetworkState {\r\n    INIT,\r\n    READY\r\n}\r\n\r\n@ccclass('PlayerInboxNetwork')\r\nexport class PlayerInboxNetwork extends WebSocketComponent {\r\n\r\n    private servieNetworkName:string = null;\r\n\r\n    /**\r\n     * \r\n     * @param state \r\n     * @param action \r\n     */\r\n    onData(state:any, action:Action){\r\n        const actionType:string = action.type;\r\n        const payload:any = action.payload;\r\n        switch(actionType){\r\n            case MainGameAction.INIT: \r\n                if(payload && payload.apiService) {\r\n                    this.servieNetworkName = payload.apiService;\r\n                }\r\n                this.initNetworkState(state);                \r\n                break\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param done \r\n     * @param capturedState \r\n     * @param sharedData \r\n     */\r\n    async onRender(done: Function, capturedState?: any, sharedData?: any): Promise<void> {\r\n        switch(capturedState.status){\r\n            case PlayerInboxNetworkState.INIT:\r\n                await this.connect(this._url);\r\n                break;\r\n        }\r\n        done && done();\r\n    }\r\n\r\n\r\n    // // ---------------\r\n\r\n    /**\r\n     * \r\n     * @returns \r\n     */\r\n    private async initNetworkState(state:PlayerInboxState){\r\n        if(!this.servieNetworkName) return;\r\n        const networkState:any = this.getAPIData(this.servieNetworkName);    \r\n        this._url = networkState.config.wssURL;\r\n        state.status = PlayerInboxNetworkState.INIT;\r\n        this.render();\r\n    }\r\n\r\n    // ------------- REQUEST PARAMS --------------\r\n\r\n    /**\r\n     * This funtion using for handler the params tranfer to service config.\r\n     * @param state \r\n     * @param paramKey \r\n     * @returns the string which passed to {paramKey} of request.\r\n     */\r\n    getStartDateParam(state:any, paramKey:string):string{\r\n        const date:Date = new Date();\r\n        return new Date(date.getFullYear(), date.getMonth(), date.getDate()).toISOString();        \r\n    }\r\n    \r\n    /**\r\n     * This funtion using for handler the params tranfer to service config.\r\n     * @param state \r\n     * @param paramKey \r\n     * @returns the string which passed to {paramKey} of request.\r\n     */\r\n    getEndDateParam(state:any, paramKey:string):string{\r\n        return new Date().toISOString();\r\n    }\r\n\r\n    // ---------------\r\n\r\n   /**\r\n    * \r\n    * @param serviceName \r\n    * @returns \r\n    */\r\n    protected getAPIData(serviceName:string):any{\r\n        if(serviceName){\r\n            const serviceData:any = this['getOtherState'](serviceName) as any;\r\n            if(!serviceData) {\r\n                error('[Lobby Popup]: Không có hoặc setup nhầm service');\r\n                return null;\r\n            }\r\n            return serviceData;\r\n        }else {            \r\n            error('[Lobby Popup] Chưa khai báo service name ! Có thể do StartGameAction.INIT chưa được dispatch.')\r\n        }\r\n        return null;\r\n    }\r\n    // ---------------\r\n\r\n    /**\r\n     * \r\n     * @param client \r\n     * @param event \r\n     */\r\n    onMessage(client:WebSocket, event:MessageEvent){\r\n        super.onMessage(client, event)\r\n        this.dispatch({type:PlayerInboxAction.UPDATE_INBOX})\r\n        // if(event.data){\r\n            \r\n        // }\r\n    }\r\n\r\n    \r\n    /**\r\n     * \r\n     * @param client \r\n     * @param event \r\n     */\r\n    onError(client:WebSocket, event:Event){\r\n        super.onError(client, event)\r\n    }\r\n}\r\n\r\n\r\n","import { _decorator, Component, Node } from 'cc';\r\nimport { GamePopup } from '../../../Scripts/ui/popup/GamePopup';\r\nimport { Prefab } from 'cc';\r\nimport { ServiceRequestConfig } from '../../../Scripts/ui/api/ServiceRequestConfig';\r\nimport { Action } from '../../../Scripts/gamify/core/Action';\r\nimport { API_ACTION, MainGameAction } from '../../../Scripts/ui/actions/StartActions';\r\nimport { ClaimInfo, InboxInfo, PlayerInboxAction, PlayerInboxBetSetting, PlayerInboxState, PlayerInboxStatus } from './types/PlayerInboxType';\r\nimport { error } from 'cc';\r\nimport { js } from 'cc';\r\nimport { Helper } from '../../../Scripts/gamify/utils/Helper';\r\nimport { WebSocketComponent } from '../../../Scripts/ui/network/WebSocketComponent';\r\nimport { instantiate } from 'cc';\r\nimport { PlayerInboxItem } from './ui/PlayerInboxItem';\r\nimport { log } from 'cc';\r\nimport { RemoteMultilingualTextPackage } from '../../../Scripts/ui/l10n/plugins/RemoteMultilingualTextPackage';\r\nimport { Event } from 'cc';\r\nimport { warn } from 'cc';\r\nimport { AsyncWaitify } from '../../../Scripts/gamify/master/AsyncWaitify';\r\nimport { PlayButtonState, PlayMode } from '../../../Scripts/ui/button/PlayButton';\r\nimport { Label } from 'cc';\r\nimport { resolve } from 'path';\r\nconst { ccclass, property } = _decorator;\r\n\r\n\r\n\r\n\r\n@ccclass('PlayerInboxPopup')\r\nexport class PlayerInboxPopup extends AsyncWaitify(GamePopup) {\r\n\r\n\r\n    @property({readonly:true})\r\n    waitForStore:string = 'PlayButton';\r\n    \r\n    @property({\r\n        type:Node,\r\n        group:'PANEL'\r\n    })\r\n    curtain:Node = null;\r\n    \r\n    @property({\r\n        type:Node,\r\n        group:'PANEL'\r\n    })\r\n    closeButton:Node = null;\r\n\r\n    @property({\r\n        type:Node,\r\n        group:'PANEL'\r\n    })\r\n    dragButton:Node = null;\r\n\r\n    @property({\r\n        type:Node,\r\n        group:'PANEL'\r\n    })\r\n    continueNotication:Node = null;\r\n\r\n    @property({\r\n        type:Node,\r\n        group:'PANEL'\r\n    })\r\n    playerInboxPanel:Node = null;\r\n    \r\n    \r\n    @property({\r\n        type:Node,\r\n        group:'PANEL',\r\n        displayName:'|__ Content'\r\n    })\r\n    inboxContainer:Node = null;\r\n\r\n    @property({\r\n        type:Prefab,\r\n        group:'ASSETS',\r\n        displayName:'Item Prefab'\r\n    })\r\n    itemPrefab:Prefab = null;\r\n    \r\n    @property({\r\n        type:RemoteMultilingualTextPackage,\r\n        group:'ASSETS',\r\n        displayName:'Language Package'\r\n    })\r\n    languagePackage:RemoteMultilingualTextPackage = null;\r\n    \r\n    @property({\r\n        type:Node,\r\n        group:'PANEL',\r\n        displayName:'|__ Prepaid Panel'\r\n    })\r\n    prepaidPanel:Node = null;\r\n    \r\n    @property({\r\n        type:Node,\r\n        group:'PANEL',\r\n        displayName:'|__ CashDrop Panel'\r\n    })\r\n    cashDropPanel:Node = null;\r\n    \r\n    @property({\r\n        type:Label,\r\n        group:'PANEL',\r\n        displayName:'|__ Empty Notication'\r\n    })\r\n    emptyNotication:Label = null;\r\n\r\n    @property({\r\n        type:ServiceRequestConfig,\r\n        group:'NETWORK',\r\n    })\r\n    listingService:ServiceRequestConfig = null;\r\n    \r\n    @property({\r\n        type:ServiceRequestConfig,\r\n        group:'NETWORK',\r\n    })\r\n    claimService:ServiceRequestConfig = null;\r\n\r\n    public allowActionTypes(): string[] {\r\n        return [\r\n            MainGameAction.INIT,\r\n            MainGameAction.SETTING,\r\n            PlayerInboxAction.UPDATE_INBOX,\r\n            PlayerInboxAction.CLAIM,\r\n            PlayerInboxAction.SHOW,\r\n            PlayerInboxAction.HIDE\r\n        ]\r\n    }\r\n\r\n\r\n    private _selectedItemInfo:InboxInfo;\r\n\r\n    private servieName:string = 'APIService';\r\n\r\n    private _continue:Function;\r\n\r\n    onInit(readyStates?:string[]){\r\n        // if(readyStates.findIndex((fullStateName:string)=>fullStateName.indexOf('<' +this.waitForStore+ '>') !== -1) !== -1){\r\n        //     // Truong hop PlayButton khoi tao truoc PlayerInBoxPopup\r\n        //     // log('[1]. Truong hop PlayButton khoi tao truoc PlayerInBoxPopup')\r\n        //     this.ready();\r\n        // }        \r\n        this.waitForReady().then(()=>{\r\n            this.dispatch({type:PlayerInboxAction.SHOW, payload:{status: PlayerInboxStatus.SHOW_ICON_VIEW}});\r\n        })\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param state \r\n     * @param action \r\n     */\r\n    onStoreRegisted(state: any, action: Action): any {\r\n        // Kiem tra khi PlayButton load xong.\r\n        if( (this.senderIsMe() && this.hasOtherState(this.waitForStore)) || ((action.sender.indexOf(this.waitForStore) !== -1))){\r\n            this.ready();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param state \r\n     * @param action \r\n     */\r\n    onData(state:PlayerInboxState, action:Action){\r\n        const actionType:string = action.type;\r\n        const payload:any = action.payload;\r\n        switch(actionType){\r\n            case MainGameAction.INIT:\r\n                if(payload && payload.apiService) {\r\n                    this.servieName = payload.apiService;\r\n                }\r\n                // \r\n                this.servieName = payload.apiService;\r\n                this.checkAndUpdateClaimmingState(state);                \r\n                break;\r\n                \r\n            case MainGameAction.SETTING:\r\n                this.implementSettingState(state, action)\r\n                break;\r\n\r\n            case PlayerInboxAction.UPDATE_INBOX:\r\n                state.status = PlayerInboxStatus.SHOW_INBOX_VIEW;\r\n                this.render(true);\r\n                state.status = PlayerInboxStatus.READY;\r\n                break;            \r\n           \r\n            case PlayerInboxAction.SHOW:\r\n                if(payload && (js.isNumber(payload.status) || !!payload.status)){\r\n                    state.status = payload.status\r\n                }\r\n                this.render();\r\n                break;\r\n\r\n            case PlayerInboxAction.HIDE:\r\n                state.status = PlayerInboxStatus.HIDE_VIEW;\r\n                this.render();\r\n                break;\r\n\r\n            case PlayerInboxAction.CLAIM:\r\n                if(payload){\r\n                    state.status = PlayerInboxStatus.CLAIM;\r\n                    if(!state.claimed) {state.claimed = Object.create(null);}\r\n                    state.claimed.url = payload.url;\r\n                    state.claimed.data = payload.data as ClaimInfo;\r\n                }\r\n                this.render();\r\n                break;\r\n        }\r\n        \r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * @param done \r\n     * @param capturedState \r\n     * @param sharedData \r\n     */\r\n    async onRender(done: Function, capturedState?: PlayerInboxState, sharedData?: any): Promise<void> {   \r\n        //  Note: capturedState only exists during the rendering process. When finished it will disappear. \r\n        // (Chu ý: capturedState chi tồn tại trong suốt quá trình render. Khi kết thúc nó sẽ biến mất.)\r\n        switch(capturedState.status){           \r\n\r\n            case PlayerInboxStatus.SHOW_ICON_VIEW:\r\n                await this.showIconViewRender(capturedState);\r\n                break;\r\n\r\n            // case PlayerInboxStatus.INIT:\r\n            case PlayerInboxStatus.SHOW_INBOX_VIEW:\r\n                await this.showInboxViewRender(capturedState);\r\n                await this.requestInboxStateRender();\r\n                break;\r\n\r\n            case PlayerInboxStatus.HIDE_VIEW:\r\n                // await this.showIconViewRender(capturedState);\r\n                break;\r\n\r\n            case PlayerInboxStatus.CLAIM:\r\n                await this.requestClaimmingStateRender(capturedState);\r\n                await this.showIconViewRender(capturedState);\r\n                await this.updateAutoSpinSettingRender(capturedState);                \r\n                break\r\n                \r\n            case PlayerInboxStatus.SHOW_CONTINUE_VIEW:\r\n                await this.showContinuePopupRender(capturedState);                \r\n                await this.updateAutoSpinSettingRender(capturedState);   \r\n                // await this.executeSpinStateRender(capturedState);\r\n                await this.showIconViewRender(capturedState);\r\n                break;\r\n\r\n            case PlayerInboxStatus.UPDATE:\r\n                await this.updateAutoSpinSettingRender(capturedState);\r\n                // await this.showIconViewRender(capturedState);\r\n                break;\r\n\r\n            case PlayerInboxStatus.AUTO_SPIN:\r\n                await this.executeSpinStateRender(capturedState);\r\n                break;\r\n        }\r\n        done && done();\r\n    }\r\n\r\n    // ------------------\r\n    \r\n    /**\r\n     * \r\n     * @param state \r\n     */\r\n    private checkAndUpdateClaimmingState(state:PlayerInboxState){        \r\n        if(!this.servieName) return;\r\n        const networkState:any = this.getOtherState(this.servieName);\r\n        const playerReward:any = this.getClaimedRewards(networkState);\r\n        const claimedInfo:ClaimInfo = this.getClaimInfoFromRewardData(playerReward);\r\n        // \r\n        if(claimedInfo){\r\n            if(!state.claimed) state.claimed = Object.create(null);\r\n            state.claimed.data = claimedInfo || null;\r\n            state.status = PlayerInboxStatus.SHOW_CONTINUE_VIEW;\r\n            this.render(true);            \r\n        }\r\n        state.status = PlayerInboxStatus.READY;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param state \r\n     */\r\n    private implementSettingState(state:PlayerInboxState, action:Action){\r\n        if(this.senderIsMe()){     \r\n            if(!this.isStoreRegisted(this.waitForStore)){   \r\n                warn('implementSettingState----------- store ' + this.waitForStore + ' chua duoc khai tao')\r\n            } \r\n            this.waitFor(this.waitForStore);\r\n            const claimedInfo: {\r\n                url: string;\r\n                data: ClaimInfo;\r\n            } = state.claimed;\r\n            // const playButtonState:PlayButtonState = this.getOtherState(this.waitForStore);\r\n            // // && playButtonState.mode == PlayMode.NORMAL\r\n            if(claimedInfo && claimedInfo.data && !!claimedInfo.data?.count && claimedInfo.data?.count > 0){                \r\n                const lastStatus:PlayerInboxStatus = state.status;\r\n                state.status = PlayerInboxStatus.AUTO_SPIN;\r\n                this.render(true);\r\n                state.status = lastStatus;\r\n                state.claimed = null;\r\n            }\r\n        }else{\r\n            // log('settign from ' + action.sender)\r\n        }\r\n    }\r\n\r\n    // ------------------\r\n\r\n    \r\n\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * \r\n     */\r\n    private async requestInboxStateRender(){\r\n        const networkState:any = await this.listingService.request();\r\n        await this.renderInboxList(networkState);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param capturedState \r\n     */\r\n    private async requestClaimmingStateRender(capturedState:PlayerInboxState){\r\n        if(!this.isStoreRegisted(this.waitForStore)){\r\n            await this.waitForReady();\r\n        }\r\n        const claimUrl:string = capturedState?.claimed?.url;\r\n        const claimedInfo:ClaimInfo = capturedState?.claimed?.data as ClaimInfo;\r\n        if(claimedInfo && claimUrl && claimUrl.length){            \r\n            const networkState:any = await this.claimService.request([{url:claimUrl}]);\r\n            if(!networkState) {\r\n                error('[PlayerInboxPopup]::checkAndSetupPlayerInboxSetting(...): Do not found state data via \\\"servieName\\\" '); \r\n                return;\r\n            }\r\n            // \r\n            const playerReward:any = this.getClaimedRewards(networkState);\r\n            const claimedInfo:ClaimInfo = this.getClaimInfoFromRewardData(playerReward);            \r\n            if(!capturedState.claimed) capturedState.claimed = Object.create(null);\r\n            capturedState.claimed.data = claimedInfo;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param rewardCount \r\n     * @param betSetting \r\n     */\r\n    protected async updateAutoSpinSettingRender(state:PlayerInboxState){        \r\n        const claimedInfo:ClaimInfo = state?.claimed?.data;\r\n        if(claimedInfo){            \r\n            const rewardCount:number = claimedInfo.count;\r\n            const betSetting:PlayerInboxBetSetting = claimedInfo.betSetting;\r\n            const isUnstopable:boolean = (!!rewardCount && rewardCount > 0);\r\n\r\n            if(!this.isStoreRegisted(this.waitForStore)){\r\n                await this.waitForReady();\r\n            }\r\n\r\n            this.dispatch({type:MainGameAction.SETTING, payload: {     \r\n                isUnstoppable:isUnstopable,         \r\n                autoSpinNumber: rewardCount,\r\n                betConfig: betSetting\r\n            }});        \r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * @param state \r\n     */\r\n    private async executeSpinStateRender(state:PlayerInboxState){\r\n        if(!this.isStoreRegisted(this.waitForStore)){  \r\n            await this.waitForReady();\r\n        }\r\n        this.dispatch({type:API_ACTION.SPIN});\r\n        // state.claimed = null;\r\n        // this.setState(state);\r\n    }\r\n    \r\n\r\n    // ------------------------------------------\r\n\r\n    /**\r\n     * \r\n     * @param state \r\n     */\r\n    private async showContinuePopupRender(state:PlayerInboxState){\r\n        this.curtain.active = true;\r\n        this.playerInboxPanel.active = false;\r\n        this.closeButton.active = false;\r\n        this.continueNotication.active = true;\r\n        this.dragButton.active = false;\r\n        await new Promise((resolve:Function)=>{\r\n            this._continue = resolve;\r\n        })\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * @param state \r\n     */\r\n    private async showInboxViewRender(state?:PlayerInboxState){\r\n        this.curtain.active = true;\r\n        this.playerInboxPanel.active = true;\r\n        this.closeButton.active = true;        \r\n        this.continueNotication.active = false;\r\n        this.dragButton.active = false;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param state \r\n     */\r\n    private async showIconViewRender(state?:PlayerInboxState){\r\n        this.curtain.active = false;        \r\n        this.playerInboxPanel.active = false;\r\n        this.closeButton.active = false;\r\n        this.continueNotication.active = false;\r\n        this.dragButton.active = true;\r\n    }\r\n\r\n        \r\n    // --------------- PRIVATE ---------------------\r\n\r\n    /**\r\n     * \r\n     * @param networkState \r\n     * @returns \r\n     */\r\n    private getClaimedRewards(networkState:any):any{\r\n        if(!networkState) return;\r\n        let claimedReward:any = Helper.searchValue(networkState, 'config.playerReward');\r\n        if(Array.isArray(claimedReward)){\r\n            claimedReward = (claimedReward as any[]).find((reward:any)=> reward.status == \"CLAIMED\");\r\n        }\r\n        return claimedReward;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param networkState \r\n     * @returns \r\n     */\r\n    private getPlayMode(networkState:any):number{\r\n        const spinData:any = networkState?.spin;\r\n        if(spinData){\r\n            const numOfFreeSpin:number = spinData.freeSpins || 0;\r\n            return (numOfFreeSpin && numOfFreeSpin > 0) ? 1 : 0; // 1: FreeSpin , 0: Normal Spin\r\n        }\r\n        return 0\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param claimRewardData \r\n     */\r\n    private getClaimInfoFromRewardData(playerReward:any):ClaimInfo{\r\n        if(!playerReward) return null;\r\n        const id:string = Helper.searchValue(playerReward, 'id');       \r\n        const rewardCount:number = playerReward.rewardCount || Helper.searchValue(playerReward, 'reward.count') || 0;\r\n        let rewardData:any = Helper.searchValue(playerReward, 'reward.data');\r\n        if(rewardData){\r\n            rewardData = js.isString(rewardData) ? JSON.parse(rewardData) : rewardData;\r\n        }\r\n        // Update auto spin number\r\n        const betSetting:PlayerInboxBetSetting = rewardData ? Helper.searchValue(rewardData, 'betSetting') : null;         \r\n        // \r\n        if(betSetting && id){\r\n            return {\r\n                claimId: id,\r\n                betSetting: betSetting,\r\n                count: rewardCount\r\n            } as ClaimInfo\r\n        }\r\n        return null\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param state \r\n     */      \r\n    protected async renderInboxList(networkState:any){\r\n        if(networkState?.config?.playerInbox){\r\n            const data:any[] = networkState?.config?.playerInbox.data;  // data of inbox_history\r\n            const domain:string = Helper.searchValue(networkState?.config, 'domain');\r\n            const playerToken:string = Helper.searchValue(networkState?.config, 'playerToken');\r\n            // \r\n            if(this.emptyNotication) { \r\n                this.emptyNotication.node.active = !(data && data.length);\r\n            }\r\n            // \r\n            if(data && data.length){\r\n                const now = new Date().getTime(); // Get the current date and time \r\n                const inboxList:InboxInfo[] = [];\r\n                data.forEach((elementData:any, index:number)=>{\r\n                    const inboxInfo:InboxInfo = js.createMap();\r\n                    // Pick data field from network data.\r\n                    inboxInfo.id = index;\r\n                    inboxInfo.claimId = Helper.searchValue(elementData, 'id');\r\n                    inboxInfo.module = Helper.searchValue(elementData, 'module');\r\n                    inboxInfo.isRead = !!Helper.searchValue(elementData, 'isRead');\r\n                    inboxInfo.claimBefore = new Date(Helper.searchValue(elementData, 'claimBefore'));\r\n                    inboxInfo.claimUrl  = domain + Helper.searchValue(elementData, 'claimUrl') + playerToken;\r\n                    inboxInfo.count  = Helper.searchValue(elementData, 'extraInfo.reward.count');\r\n                    // inboxInfo.gameMode  = Helper.searchValue(elementData, 'extraInfo.reward.data.gameMode.type'); // Optional, do not need.\r\n                    inboxInfo.betSetting = Helper.searchValue(elementData, 'extraInfo.reward.data.betSetting');\r\n                    // \r\n                    inboxList.push(inboxInfo);\r\n                })\r\n                if(inboxList.length) {\r\n                    inboxList.sort((a:InboxInfo, b:InboxInfo)=>{\r\n                        const timeA = new Date(a.claimBefore).getTime();\r\n                        const timeB = new Date(b.claimBefore).getTime();\r\n                        // Compare the 'created' times\r\n                        if (timeA < now && timeB < now) {\r\n                            return 0; // Keep the order unchanged if both times are less than the current time\r\n                        } else if (timeA < now) {\r\n                            return 1; // 'a' should be placed at the end of the array\r\n                        } else if (timeB < now) {\r\n                            return -1; // 'b' should be placed at the end of the array\r\n                        } else {\r\n                            return (timeA - timeB); // Compare times in ascending order\r\n                        }\r\n                    })\r\n                    // \r\n                    // await this.activeViewRender();\r\n                    await this.updateInboxHistoryRender(inboxList);\r\n                }\r\n                // \r\n            }else{\r\n                warn('Empty Inbox !!!')\r\n            }\r\n            //\r\n\r\n            // \r\n        }else{\r\n            warn('There is no data for networkState.config.playerInbox');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param inboxList \r\n     */\r\n    private async updateInboxHistoryRender(inboxList:InboxInfo[]){\r\n        if(this.inboxContainer && this.itemPrefab){\r\n            if(this.languagePackage){\r\n                await this.languagePackage.waitForReady();\r\n            }\r\n            this.inboxContainer.removeAllChildren();\r\n            inboxList.forEach((data:InboxInfo)=>{\r\n                const itemName:string = data.claimId;\r\n                let itemNode:Node = this.inboxContainer.getChildByName(itemName);\r\n                if(!itemNode){\r\n                    itemNode= instantiate(this.itemPrefab);\r\n                    itemNode.parent = this.inboxContainer;\r\n                    itemNode.name = itemName;\r\n                }\r\n                // \r\n                const item:PlayerInboxItem = itemNode.getComponent(PlayerInboxItem);\r\n                item.on(PlayerInboxItem.EVENT.SELECTED, this.onClaimItem.bind(this));\r\n                item.render(data);\r\n                // \r\n            })\r\n        }\r\n    }\r\n\r\n    // -----------------\r\n    \r\n    /**\r\n     * \r\n     * @param itemInfo \r\n     */\r\n    protected async onClaimItem(itemInfo:InboxInfo){        \r\n        // if(this._selectedItemInfo == itemInfo) return;\r\n        // \r\n        if(this.claimService){\r\n            const claimedInfo:ClaimInfo = {\r\n                claimId: itemInfo.claimId,\r\n                count: itemInfo.count,\r\n                betSetting: itemInfo.betSetting\r\n            }\r\n            // \r\n            this.dispatch({type:PlayerInboxAction.CLAIM, payload:{\r\n                url: itemInfo.claimUrl,\r\n                data: claimedInfo                \r\n            }});\r\n            //           \r\n        }else{\r\n            error('No service config \\\"claimService\\\"');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param event \r\n     */\r\n    protected onPressIconButton(event:Event){\r\n        this.dispatch({type:PlayerInboxAction.SHOW, payload:{status: PlayerInboxStatus.SHOW_INBOX_VIEW} });\r\n    }\r\n    \r\n    /**\r\n     * \r\n     * @param event \r\n     */\r\n    protected onPressCloseButton(event:Event){\r\n        this.dispatch({type:PlayerInboxAction.SHOW, payload:{status: PlayerInboxStatus.SHOW_ICON_VIEW}});\r\n    }\r\n\r\n    protected onPressOkButton(event:Event){\r\n        if(this._continue){\r\n            this._continue();\r\n        }\r\n        // this.dispatch({type:PlayerInboxAction.SHOW, payload:{status: PlayerInboxStatus.SHOW_INBOX_VIEW} });\r\n    }\r\n\r\n    // -----------------\r\n    /**\r\n     * This funtion using for handler the params tranfer to service config.\r\n     * @param state \r\n     * @param paramKey \r\n     * @returns the string which passed to {paramKey} of request.\r\n     */\r\n    getStartDateParam(state:any, paramKey:string):string{\r\n        const date:Date = new Date();\r\n        return new Date(date.getFullYear(), date.getMonth(), date.getDate()).toISOString();        \r\n    }\r\n    \r\n    /**\r\n     * This funtion using for handler the params tranfer to service config.\r\n     * @param state \r\n     * @param paramKey \r\n     * @returns the string which passed to {paramKey} of request.\r\n     */\r\n    getEndDateParam(state:any, paramKey:string):string{\r\n        return new Date().toISOString();\r\n    }\r\n\r\n    /**\r\n     * This funtion using for handler the params tranfer to service config.\r\n     * @param state \r\n     * @param paramKey \r\n     * @returns \r\n     */\r\n    getCurrentRewardId(state:any, paramKey:string):string{        \r\n        return (this._selectedItemInfo) ? this._selectedItemInfo.claimId : undefined\r\n    }\r\n\r\n    /**\r\n     * This funtion using for handler the params tranfer to service config.\r\n     * @param state \r\n     * @param paramKey \r\n     * @returns \r\n     */\r\n    getCurrentModule(state:any, paramKey:string):string{\r\n        return (this._selectedItemInfo) ? this._selectedItemInfo.module : undefined\r\n    }\r\n\r\n    getIsFunParam(state:any, paramKey:string):string{\r\n        return 'false'\r\n    }\r\n    // -----------------\r\n    /**\r\n     * \r\n     * @returns \r\n     */\r\n    protected getAPIData():any{\r\n        const serviceData:any = this.getOtherState(this.servieName);\r\n        if(!serviceData) {\r\n            error('Không có hoặc setup nhầm service');\r\n            return null;\r\n        }\r\n        return serviceData;\r\n    }\r\n    // -----------------\r\n\r\n}\r\n\r\n\r\n","export type PlayerInboxResponse = {\r\n    items:InboxInfo[]\r\n    count?:number,\r\n    page?:number,\r\n    pageCount?:number,\r\n    size?: number,\r\n    total?: number\r\n}\r\n\r\nexport type ClaimInfo = {\r\n    claimId:string,\r\n    count:number,\r\n    betSetting:PlayerInboxBetSetting,\r\n}\r\n\r\nexport type InboxInfo = {\r\n    id:number,\r\n    claimId:string,\r\n    gameMode:string,\r\n    module:string,\r\n    isRead:boolean,\r\n    // count:number,\r\n    // betSetting:PlayerInboxBetSetting,\r\n    claimUrl:string,\r\n    claimBefore:Date\r\n} & ClaimInfo\r\n\r\n\r\n\r\nexport type PlayerInboxBetSetting = {\r\n    betSize: number, \r\n    betLevel: number, \r\n    baseBet: number, \r\n    betAmount: number\r\n}\r\n\r\nexport type PlayerInboxState = {\r\n    status:number,\r\n    // gameMode?:number,\r\n    claimed:{\r\n        url:string\r\n        data: ClaimInfo\r\n    },\r\n    // rewardCount?:number\r\n}\r\n\r\nexport enum PlayerInboxStatus {\r\n    INIT,\r\n    READY,\r\n    UPDATE,    \r\n    SHOW_CONTINUE_VIEW,\r\n    SHOW_ICON_VIEW,\r\n    SHOW_INBOX_VIEW,    \r\n    HIDE_VIEW,\r\n    CLAIM,\r\n    AUTO_SPIN\r\n}\r\n\r\nexport const PlayerInboxAction = {\r\n    UPDATE_INBOX:'player_inbox_update_inbox_action',\r\n    UPDATE_SETTING:'player_inbox_update_setting_action',\r\n    SHOW:'player_inbox_show_action',\r\n    HIDE:'player_inbox_hide_action',\r\n    CLAIM:'player_inbox_claim_action',\r\n}"]}